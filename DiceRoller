import datetime as dt
import random as rd
import sys
import time as tm
import tkinter as tk
import webbrowser

# Following 3 lines makes sure the code "begins"
print("Hello!")

ans = "y"
while ans == "y" or ans == "Y":

    roll_list = []  # Creates an empty list, to fill up with number of rolls needed


    def roll_amount():  # Defining a function, to get an input regarding number of rolls
        no = input("How many times do you want to roll 6 sixes?\n")

        try:
            int_n = int(no)
            if int(no) > 0:
                return int_n
            else:
                print("The input has to be a positive integer.")
                return roll_amount()

        except ValueError:  # A ValueError occur, if the input is not an integer, and the function restarts
            print("The input has to be an integer.")
            return roll_amount()


    n = roll_amount()  # Calling the value obtained by our function
    start_tid = tm.time()  # Reads the time in order to measure time elapsed
    for _ in range(n):
        rollsum = 0  # Resets our roll sum
        rollno = 0  # Rests our number of rolls
        while rollsum != 36:  # As long as the sum of the dice is not 36: ...
            a, b, c, d, e, f = (rd.randint(1, 6) for k in
                                range(6))  # ... the dice gets assigned random values between 1 and 6
            rollsum = a + b + c + d + e + f  # The sum of the dice is calculated
            rollno += 1  # The number of rolls is increased by 1

            # Following lines prints each roll, each rollsum as well as each roll number
            print("\n"
                  "Roll: %s %s %s %s %s %s"
                  "\nSum: %s"
                  "\nRoll number: %s" % (str(a), str(b), str(c), str(d), str(e), str(f), str(rollsum), str(rollno)))
        roll_list.append(rollno)  # Adds the final number of rolls to the list, in order to calculate the average

    # Following lines calculates the results of the simulation
    avg = round(sum(roll_list) / len(roll_list), 3)  # Calculating the average amount of rolls necessary
    ratio = round(avg / 46656, 3)  # 1 / (1/6)^6 - the ratio between our average and the expected value is calculated
    time = round((tm.time() - start_tid), 1)

    # Following lines will add to our results text file, the "a" in the commands appends, instead of eg overwriting
    f = open("diceroller_results.txt", "a")
    now = dt.datetime.now()
    f.writelines(["Time: " + now.strftime("%d-%m-%Y %H:%M:%S"),
                  "\nNumber of iterations: %s" % str(n),
                  "\nTotal number of rolls: %s" % sum(roll_list),
                  "\nResult based on expected value: " + str(ratio),
                  "\n*************************************\n"])
    f.close()

    # Following lines will print the result of the simulation, in a new window, which is closed when the user press OK
    root = tk.Tk()

    root.attributes("-topmost", True)
    root.title("Resultater")
    label = tk.Label(root, text="\nElapsed time: %s seconds\n"
                                "Number of iterations: %s\n"
                                "Total number of rolls: %s\n"
                                "Average amount of rolls neded: %s\n"
                                "That is %s times the exptected amount" % (time, n, sum(roll_list), avg, ratio))

    def retrybutton():
        root.destroy()

    def exitbutton():
        root.destroy()
        sys.exit()

    def resultsbutton():
        webbrowser.open("diceroller_results.txt")

    label.pack(side="top", fill="both", expand=True, padx=10, pady=10)
    button1 = tk.Button(root, text="Retry", command=retrybutton)
    button1.pack(side="left", fill="none", expand=True)
    button2 = tk.Button(root, text="Exit", command=exitbutton)
    button2.pack(side="right", fill="none", expand=True)
    button3 = tk.Button(root, text="Results", command=resultsbutton)
    button3.pack(fill="none", expand=True)

    root.mainloop()
